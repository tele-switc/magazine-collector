name: Magazine Article Collector

on:
  schedule:
    - cron: '0 1 * * *'  # UTC时间每天凌晨1点（北京时间9点）
  workflow_dispatch:     # 允许手动触发
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      WORKSPACE: ${{ github.workspace }}
    steps:
      # 步骤1: 检出主仓库
      - name: Checkout local repository
        uses: actions/checkout@v4
        with:
          path: main_repo
          fetch-depth: 0
          
      # 步骤2: 检出源仓库
      - name: Checkout source repository with LFS
        uses: actions/checkout@v4
        with:
          repository: hehonghui/awesome-english-ebooks
          path: source_repo_1
          lfs: true
          fetch-depth: 0
        
      # 诊断步骤
      - name: Debug - Workspace Structure
        run: |
          echo "===== 工作区结构 ====="
          echo "主仓库脚本位置:"
          ls -la main_repo/.github/scripts
          echo "源杂志内容:"
          ls -la source_repo_1/01_economist/
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ebooklib beautifulsoup4 markdown2 jinja2
          
      # 关键修复点：使用正确的脚本文件名
      - name: Run collector script
        run: |
          python "main_repo/.github/scripts/collector_mvp.py"
        
      # 网站验证步骤
      - name: Validate generated site
        run: |
          echo "生成的网站结构:"
          ls -lR ./docs || echo "无法列出网站目录"
          test -f ./docs/index.html && echo "✅ index.html存在" || echo "❌ 缺少index.html"
        
      - name: Upload pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./docs

  deploy:
    needs: build
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
      
      # 添加部署后验证
      - name: Verify deployment
        run: |
          echo "部署已完成！访问地址:"
          echo "${{ steps.deployment.outputs.page_url }}"
